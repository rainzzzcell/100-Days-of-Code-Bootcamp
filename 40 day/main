from data_manager import DataManager
from datetime import datetime, timedelta
import time  # Importing the correct time module for sleep function
from flight_search import FlightSearch
from notification_manager import NotificationManager

# Initialize DataManager and get data from the Google Sheet
data_manager = DataManager()
sheet_data = data_manager.get_destination_data()
notification_manager = NotificationManager()
flight_search = FlightSearch()

ORIGIN_CITY_IATA = "LAX"

data_manager.destination_data = sheet_data
data_manager.update_destination_codes()

# ==================== Retrieve your customer emails ====================

customer_data = data_manager.get_customer_emails()
# Verify the name of your email column in your sheet. Yours may be different from mine
customer_email_list = [row["whatIsYourEmail?"] for row in customer_data]
# print(f"Your email list includes {customer_email_list}")

# ==================== Search for direct flights  ====================

tomorrow = datetime.now() + timedelta(days=1)
six_month_from_today = datetime.now() + timedelta(days=(6 * 30))
# Instantiate FlightSearch



# Define a function to find the cheapest flight
def find_cheapest_flight(flights):
    # Assuming flights is a list of strings with flight details
    cheapest_flight = None
    cheapest_price = float('inf')

    for flight in flights:
        # Example parsing assuming flight string contains "Price: £XXX"
        try:
            price_str = flight.split("Price: £")[1].split()[0]
            price = float(price_str)

            if price < cheapest_price:
                cheapest_price = price
                cheapest_flight = flight
        except (IndexError, ValueError):
            continue  # Skip any flights that don't match the expected format

    return cheapest_flight, cheapest_price


for destination in sheet_data:
    print(f"Getting direct flights for {destination['city']}...")
    flights = flight_search.check_flights(
        ORIGIN_CITY_IATA,
        destination["iataCode"],
        from_time=tomorrow,
        to_time=six_month_from_today
    )
    cheapest_flight, cheapest_price = find_cheapest_flight(flights)
    if cheapest_flight:
        print(f"{destination['city']}: £{cheapest_price}")
    else:
        print(f"No direct flights found for {destination['city']}")

    # Slowing down requests to avoid rate limit
    time.sleep(2)

    # ==================== Search for indirect flight if N/A ====================

    if not cheapest_flight:
        print(f"No direct flight to {destination['city']}. Looking for indirect flights...")
        stopover_flights = flight_search.check_flights(
            ORIGIN_CITY_IATA,
            destination["iataCode"],
            from_time=tomorrow,
            to_time=six_month_from_today,
            is_direct=False
        )
        cheapest_flight, cheapest_price = find_cheapest_flight(stopover_flights)
        if cheapest_flight:
            print(f"Cheapest indirect flight price is: £{cheapest_price}")
        else:
            print(f"No indirect flights found for {destination['city']}")

# Ensure sheet_data is not empty
if sheet_data:
    for row in sheet_data:
        if not row.get("iataCode"):
            # Fetch and update the IATA code for each city
            row["iataCode"] = flight_search.get_destination_code(row["city"])

    print(f"Updated sheet_data:\n {sheet_data}")

    # Update the Google Sheet with the new IATA codes
    data_manager.destination_data = sheet_data
    data_manager.update_destination_codes()
else:
    print("No data found in sheet_data.")
